//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""996241fe-7ef7-46ba-bb8e-23e17b69df01"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""f6a96d6d-ea81-4103-ab5b-c36988249fce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""14ff44d6-b7c8-4752-a3ef-472eefea6ed8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""0b295e69-c3a9-466a-add9-776e77239bb1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""4b9a8a48-aee9-4d77-b408-5f94ced182e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""3cdbf98d-a15a-4aaf-ba4f-1c385401dee0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""03285923-3b1b-42fa-91c1-b730dfb20160"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftStickUp"",
                    ""type"": ""Value"",
                    ""id"": ""90cbc57f-682c-4b74-bc2d-ec49654ce017"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftStickDown"",
                    ""type"": ""Value"",
                    ""id"": ""61380828-6207-4e55-bb4f-ae5c5e8df483"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftStickLeft"",
                    ""type"": ""Value"",
                    ""id"": ""6183a8bb-df88-4ddf-a2b4-1f774ab1f46c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftStickRight"",
                    ""type"": ""Value"",
                    ""id"": ""7135c78d-c1d6-43de-8afc-f2d0de309f9d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStickUp"",
                    ""type"": ""Value"",
                    ""id"": ""fa30a766-017f-43c8-a77d-103e91ad4bb0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStickDown"",
                    ""type"": ""Value"",
                    ""id"": ""1dc96695-afcd-47a1-81b1-ec5f600dacb2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStickLeft"",
                    ""type"": ""Value"",
                    ""id"": ""c0f7c638-ce78-4cda-8f62-39224b94267e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStickRight"",
                    ""type"": ""Value"",
                    ""id"": ""c7bbda94-d733-477a-89cb-79c9437eca0d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LT"",
                    ""type"": ""Value"",
                    ""id"": ""47784407-73af-4668-bc3d-b0d0b002dc64"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LB"",
                    ""type"": ""Button"",
                    ""id"": ""96adae17-b971-4ad4-b194-8c263916275d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RT"",
                    ""type"": ""Value"",
                    ""id"": ""a8f26598-3741-45d5-99eb-3e1813dbf70a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RB"",
                    ""type"": ""Button"",
                    ""id"": ""dffd5312-58b8-4383-8c98-baa72cdfd709"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DUp"",
                    ""type"": ""Button"",
                    ""id"": ""2602199b-2191-49da-a899-3fbf763d2c87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DDown"",
                    ""type"": ""Button"",
                    ""id"": ""d324a2d8-b425-424f-bdeb-65419504882d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DLeft"",
                    ""type"": ""Button"",
                    ""id"": ""594ffb25-f554-4ae0-9656-f555f6b2fa0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DRight"",
                    ""type"": ""Button"",
                    ""id"": ""a48136dd-e718-400f-9447-cfd4b8a8ce25"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0f569bec-58cf-4925-96b1-38830947d0ad"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c57881a-e295-4608-ad21-92968e4e43cc"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b69f060-b6dc-449a-ad6f-20d072367e3d"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""077ad1b4-141a-41db-bcec-8cbcf8818f66"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd908416-b4ed-4650-87a0-4a57fa69a7db"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d183b7f-3b8f-435b-a6bf-e92c715fbf4c"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebe2fccb-92ce-4b9b-b6c8-4ff227da8fa2"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f8d6fa1-f32b-4599-8477-674f72fa8b56"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStickDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb25f953-6959-400a-9a11-3bcb5da84b3a"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStickLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f579cad6-3b36-4117-9ffd-593f312cc630"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStickRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87229243-d350-48d0-8be6-1bafc71fb548"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8814e1cc-1b1a-4dd4-8d77-ad2dd5fb7eda"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStickDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9fbdbea-b3c5-48d9-9d54-8f81af543212"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStickLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32aa4a63-b094-4f64-80e8-c5a88a35fd80"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStickRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0ed6c0a-2aa9-4640-9349-bdf2a68b8984"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e42ccfe0-b733-4494-a5b5-f78ee57b41bc"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9520d13e-6a54-4adc-a732-1ebfd55064a5"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b36030b2-c2fa-4121-a2d8-789402babdc1"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74be2ffe-7775-4951-bc09-2a91f937fa7b"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85b451f8-1b97-4464-a878-d1152053de3a"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcf3092b-0970-4a9e-ba86-a0239967ff13"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a1c3ad4-c077-4b52-8f5f-1a1e995ed5f6"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_A = m_Gameplay.FindAction("A", throwIfNotFound: true);
        m_Gameplay_B = m_Gameplay.FindAction("B", throwIfNotFound: true);
        m_Gameplay_X = m_Gameplay.FindAction("X", throwIfNotFound: true);
        m_Gameplay_Y = m_Gameplay.FindAction("Y", throwIfNotFound: true);
        m_Gameplay_Start = m_Gameplay.FindAction("Start", throwIfNotFound: true);
        m_Gameplay_Select = m_Gameplay.FindAction("Select", throwIfNotFound: true);
        m_Gameplay_LeftStickUp = m_Gameplay.FindAction("LeftStickUp", throwIfNotFound: true);
        m_Gameplay_LeftStickDown = m_Gameplay.FindAction("LeftStickDown", throwIfNotFound: true);
        m_Gameplay_LeftStickLeft = m_Gameplay.FindAction("LeftStickLeft", throwIfNotFound: true);
        m_Gameplay_LeftStickRight = m_Gameplay.FindAction("LeftStickRight", throwIfNotFound: true);
        m_Gameplay_RightStickUp = m_Gameplay.FindAction("RightStickUp", throwIfNotFound: true);
        m_Gameplay_RightStickDown = m_Gameplay.FindAction("RightStickDown", throwIfNotFound: true);
        m_Gameplay_RightStickLeft = m_Gameplay.FindAction("RightStickLeft", throwIfNotFound: true);
        m_Gameplay_RightStickRight = m_Gameplay.FindAction("RightStickRight", throwIfNotFound: true);
        m_Gameplay_LT = m_Gameplay.FindAction("LT", throwIfNotFound: true);
        m_Gameplay_LB = m_Gameplay.FindAction("LB", throwIfNotFound: true);
        m_Gameplay_RT = m_Gameplay.FindAction("RT", throwIfNotFound: true);
        m_Gameplay_RB = m_Gameplay.FindAction("RB", throwIfNotFound: true);
        m_Gameplay_DUp = m_Gameplay.FindAction("DUp", throwIfNotFound: true);
        m_Gameplay_DDown = m_Gameplay.FindAction("DDown", throwIfNotFound: true);
        m_Gameplay_DLeft = m_Gameplay.FindAction("DLeft", throwIfNotFound: true);
        m_Gameplay_DRight = m_Gameplay.FindAction("DRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_A;
    private readonly InputAction m_Gameplay_B;
    private readonly InputAction m_Gameplay_X;
    private readonly InputAction m_Gameplay_Y;
    private readonly InputAction m_Gameplay_Start;
    private readonly InputAction m_Gameplay_Select;
    private readonly InputAction m_Gameplay_LeftStickUp;
    private readonly InputAction m_Gameplay_LeftStickDown;
    private readonly InputAction m_Gameplay_LeftStickLeft;
    private readonly InputAction m_Gameplay_LeftStickRight;
    private readonly InputAction m_Gameplay_RightStickUp;
    private readonly InputAction m_Gameplay_RightStickDown;
    private readonly InputAction m_Gameplay_RightStickLeft;
    private readonly InputAction m_Gameplay_RightStickRight;
    private readonly InputAction m_Gameplay_LT;
    private readonly InputAction m_Gameplay_LB;
    private readonly InputAction m_Gameplay_RT;
    private readonly InputAction m_Gameplay_RB;
    private readonly InputAction m_Gameplay_DUp;
    private readonly InputAction m_Gameplay_DDown;
    private readonly InputAction m_Gameplay_DLeft;
    private readonly InputAction m_Gameplay_DRight;
    public struct GameplayActions
    {
        private @Input m_Wrapper;
        public GameplayActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_Gameplay_A;
        public InputAction @B => m_Wrapper.m_Gameplay_B;
        public InputAction @X => m_Wrapper.m_Gameplay_X;
        public InputAction @Y => m_Wrapper.m_Gameplay_Y;
        public InputAction @Start => m_Wrapper.m_Gameplay_Start;
        public InputAction @Select => m_Wrapper.m_Gameplay_Select;
        public InputAction @LeftStickUp => m_Wrapper.m_Gameplay_LeftStickUp;
        public InputAction @LeftStickDown => m_Wrapper.m_Gameplay_LeftStickDown;
        public InputAction @LeftStickLeft => m_Wrapper.m_Gameplay_LeftStickLeft;
        public InputAction @LeftStickRight => m_Wrapper.m_Gameplay_LeftStickRight;
        public InputAction @RightStickUp => m_Wrapper.m_Gameplay_RightStickUp;
        public InputAction @RightStickDown => m_Wrapper.m_Gameplay_RightStickDown;
        public InputAction @RightStickLeft => m_Wrapper.m_Gameplay_RightStickLeft;
        public InputAction @RightStickRight => m_Wrapper.m_Gameplay_RightStickRight;
        public InputAction @LT => m_Wrapper.m_Gameplay_LT;
        public InputAction @LB => m_Wrapper.m_Gameplay_LB;
        public InputAction @RT => m_Wrapper.m_Gameplay_RT;
        public InputAction @RB => m_Wrapper.m_Gameplay_RB;
        public InputAction @DUp => m_Wrapper.m_Gameplay_DUp;
        public InputAction @DDown => m_Wrapper.m_Gameplay_DDown;
        public InputAction @DLeft => m_Wrapper.m_Gameplay_DLeft;
        public InputAction @DRight => m_Wrapper.m_Gameplay_DRight;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @A.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnA;
                @B.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnB;
                @B.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnB;
                @B.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnB;
                @X.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnX;
                @X.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnX;
                @X.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnX;
                @Y.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnY;
                @Y.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnY;
                @Y.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnY;
                @Start.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnStart;
                @Select.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSelect;
                @LeftStickUp.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStickUp;
                @LeftStickUp.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStickUp;
                @LeftStickUp.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStickUp;
                @LeftStickDown.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStickDown;
                @LeftStickDown.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStickDown;
                @LeftStickDown.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStickDown;
                @LeftStickLeft.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStickLeft;
                @LeftStickLeft.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStickLeft;
                @LeftStickLeft.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStickLeft;
                @LeftStickRight.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStickRight;
                @LeftStickRight.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStickRight;
                @LeftStickRight.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStickRight;
                @RightStickUp.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStickUp;
                @RightStickUp.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStickUp;
                @RightStickUp.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStickUp;
                @RightStickDown.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStickDown;
                @RightStickDown.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStickDown;
                @RightStickDown.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStickDown;
                @RightStickLeft.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStickLeft;
                @RightStickLeft.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStickLeft;
                @RightStickLeft.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStickLeft;
                @RightStickRight.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStickRight;
                @RightStickRight.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStickRight;
                @RightStickRight.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStickRight;
                @LT.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLT;
                @LT.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLT;
                @LT.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLT;
                @LB.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLB;
                @LB.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLB;
                @LB.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLB;
                @RT.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRT;
                @RT.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRT;
                @RT.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRT;
                @RB.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRB;
                @RB.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRB;
                @RB.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRB;
                @DUp.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDUp;
                @DUp.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDUp;
                @DUp.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDUp;
                @DDown.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDDown;
                @DDown.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDDown;
                @DDown.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDDown;
                @DLeft.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDLeft;
                @DLeft.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDLeft;
                @DLeft.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDLeft;
                @DRight.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDRight;
                @DRight.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDRight;
                @DRight.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDRight;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
                @B.started += instance.OnB;
                @B.performed += instance.OnB;
                @B.canceled += instance.OnB;
                @X.started += instance.OnX;
                @X.performed += instance.OnX;
                @X.canceled += instance.OnX;
                @Y.started += instance.OnY;
                @Y.performed += instance.OnY;
                @Y.canceled += instance.OnY;
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @LeftStickUp.started += instance.OnLeftStickUp;
                @LeftStickUp.performed += instance.OnLeftStickUp;
                @LeftStickUp.canceled += instance.OnLeftStickUp;
                @LeftStickDown.started += instance.OnLeftStickDown;
                @LeftStickDown.performed += instance.OnLeftStickDown;
                @LeftStickDown.canceled += instance.OnLeftStickDown;
                @LeftStickLeft.started += instance.OnLeftStickLeft;
                @LeftStickLeft.performed += instance.OnLeftStickLeft;
                @LeftStickLeft.canceled += instance.OnLeftStickLeft;
                @LeftStickRight.started += instance.OnLeftStickRight;
                @LeftStickRight.performed += instance.OnLeftStickRight;
                @LeftStickRight.canceled += instance.OnLeftStickRight;
                @RightStickUp.started += instance.OnRightStickUp;
                @RightStickUp.performed += instance.OnRightStickUp;
                @RightStickUp.canceled += instance.OnRightStickUp;
                @RightStickDown.started += instance.OnRightStickDown;
                @RightStickDown.performed += instance.OnRightStickDown;
                @RightStickDown.canceled += instance.OnRightStickDown;
                @RightStickLeft.started += instance.OnRightStickLeft;
                @RightStickLeft.performed += instance.OnRightStickLeft;
                @RightStickLeft.canceled += instance.OnRightStickLeft;
                @RightStickRight.started += instance.OnRightStickRight;
                @RightStickRight.performed += instance.OnRightStickRight;
                @RightStickRight.canceled += instance.OnRightStickRight;
                @LT.started += instance.OnLT;
                @LT.performed += instance.OnLT;
                @LT.canceled += instance.OnLT;
                @LB.started += instance.OnLB;
                @LB.performed += instance.OnLB;
                @LB.canceled += instance.OnLB;
                @RT.started += instance.OnRT;
                @RT.performed += instance.OnRT;
                @RT.canceled += instance.OnRT;
                @RB.started += instance.OnRB;
                @RB.performed += instance.OnRB;
                @RB.canceled += instance.OnRB;
                @DUp.started += instance.OnDUp;
                @DUp.performed += instance.OnDUp;
                @DUp.canceled += instance.OnDUp;
                @DDown.started += instance.OnDDown;
                @DDown.performed += instance.OnDDown;
                @DDown.canceled += instance.OnDDown;
                @DLeft.started += instance.OnDLeft;
                @DLeft.performed += instance.OnDLeft;
                @DLeft.canceled += instance.OnDLeft;
                @DRight.started += instance.OnDRight;
                @DRight.performed += instance.OnDRight;
                @DRight.canceled += instance.OnDRight;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnA(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnLeftStickUp(InputAction.CallbackContext context);
        void OnLeftStickDown(InputAction.CallbackContext context);
        void OnLeftStickLeft(InputAction.CallbackContext context);
        void OnLeftStickRight(InputAction.CallbackContext context);
        void OnRightStickUp(InputAction.CallbackContext context);
        void OnRightStickDown(InputAction.CallbackContext context);
        void OnRightStickLeft(InputAction.CallbackContext context);
        void OnRightStickRight(InputAction.CallbackContext context);
        void OnLT(InputAction.CallbackContext context);
        void OnLB(InputAction.CallbackContext context);
        void OnRT(InputAction.CallbackContext context);
        void OnRB(InputAction.CallbackContext context);
        void OnDUp(InputAction.CallbackContext context);
        void OnDDown(InputAction.CallbackContext context);
        void OnDLeft(InputAction.CallbackContext context);
        void OnDRight(InputAction.CallbackContext context);
    }
}
